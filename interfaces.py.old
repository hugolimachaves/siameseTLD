import numpy as np
from ctypes import *
from sklearn.neighbors import KNeighborsClassifier

dll = CDLL('TLD/bin/Debug/libTLD.so')

positive_obj_model    = []
negative_obj_model    = []
feature_pos_obj_model = []
feature_neg_obj_model = []

SIZE_ARRAY = 32
LAST_ADDED = -1
SIZE_DESCRIPTOR = 255

def convertSimilatiry(siameseDistance):
    return 1 / (siameseDistance+1) # retorna a distancia no TLD
    
def getLength(element): # verifica o tamanho total de elementos em uma estrutura de dados de dimensoes arbitrárias
    if isinstance(element, list):
        return sum(([getLength(i) for i in element]))
    return 1

def getDescriptor(bb):
    descriptor = []
    #TODO Estamos colocando apenas um place holder. A funcao depende da analise do tracker siameseFC no python
    for _ in range(SIZE_DESCRIPTOR):
        descriptor.append(float(np.random.randn()))
    
    return descriptor

# passa  as deep Features dos candidatos para o presente frame conjuntamente
# com o modelo positivo(default) ou negativo
def distCandidatesToTheModel(deep_features_candidates, isPositive=True):
    #Usa os seguintes parametros globais:  feature_pos_obj_model, feature_neg_obj_model  
    
    if isPositive: # modelo positivo do object model
        positiveLabel = [1 for i in feature_pos_obj_model]
        labels = positiveLabel
        features = feature_pos_obj_model
    else: # modelo negativo do object model
        negativeLabel = [0 for i in feature_neg_obj_model] 
        labels = negativeLabel
        features = feature_neg_obj_model
    
    knn_1 = KNeighborsClassifier(n_neighbors=1)
    knn_1.fit(features, labels)
    
    distances = []
    positions = []
    for candidate in deep_features_candidates: # pega a menor distancia para cada candidato na lista deep_features_candidate
        dist,position = knn_1.kneighbors(candidate, n_neighbors=1, return_distance=True)
        distances.append(dist)
        positions.append(position)
        # example: neigh.kneighbors([[1., 1., 1.]])
        # pode das errado porque a documentacao mostra um array de array

    return distances, positions # retorna a menor distancia em relação ao modelo, é uma lista pois sao varios candidatos e tambem  a posição no vetor

def detSimilarity(candidates): # passo uma lista de bb dos candidatos (lista de lista)
    # sera utilizado - (sao globais): positive_obj_model, negative_obj_model
    for bb in negative_obj_model[LAST_ADDED]:
        descriptor = getDescriptor(bb)
        feature_neg_obj_model.append(descriptor) # o tamanho e equivalente ao numero de descritores negativos

    for bb in positive_obj_model[LAST_ADDED]:
        descriptor = getDescriptor(bb)
        feature_pos_obj_model.append(descriptor)  # o tamanho e equivalente ao numero de descritores positivos

    deep_features_candidates = []
    for bb in candidates:
        descriptor = getDescriptor(bb)
        deep_features_candidates.append(descriptor)

    assert(getLength(feature_pos_obj_model) == getLength(positive_obj_model)), 'o tamanho do object Model difere do tamanho dos descritores'
    assert(getLength(feature_neg_obj_model) == getLength(negative_obj_model)), 'o tamanho do object Model difere do tamanho dos descritores'

    positive_distances = distCandidatesToTheModel(deep_features_candidates, isPositive=True)
    negative_distances = distCandidatesToTheModel(deep_features_candidates, isPositive=False)

#'frame' se refere ao numero do frame que esta sendo processado no codigo .py
def interface1(frame): 
    '''
    codigo de execucao do c/c++ aqui!
     
    Parametros: (frame ou void)
 
    Retorno do codigo:
    1) lista com as posicoes extraidas, 'lista1'. pode ser uma lista de estruturas de 5 valores,
        (4 referentes a localizacao do frame, e um indicando se o modelo eh positivo-1- ou negativo-0)
        Caso precise retornar um numero fixo de valores, entre em contato comigo. A principio, se precisar retornar
        um vetor de tamanho fixo, adote um vetor de 100 estruturas de 5 posicoes. Onde nao ha nada preenchido, coloque
        valores negativos, como: -1
    2)Frame ao qual foi processada as informacoes, que alimentara a variavel: retorno_frame.
    Vaviavel necessaria para garantir o processamento do mesmo frame.
    '''

    arry_size = 100 # Example

    parameters_path = "/home/hugo/Documents/Mestrado/codigoKevyn2/dataset/exemplo/01-Light_video00001/parameters.yml"
    parameters_path = parameters_path.encode('utf-8')

    retorno_frame = c_int()

    size_candidates = c_int()
    size_positive   = c_int()
    size_negative   = c_int()

    array_bb_candidates         = [-1] * arry_size
    array_object_model_positive = [-1] * arry_size
    array_object_model_negative = [-1] * arry_size

    array_bb_candidates         = (c_float * arry_size) (*array_bb_candidates)
    array_object_model_positive = (c_float * arry_size) (*array_object_model_positive)
    array_object_model_negative = (c_float * arry_size) (*array_object_model_negative)

    print(type(parameters_path))
    dll.initializer_TLD(parameters_path)


    #while
    dll.TLD_function_1(byref(retorno_frame), array_bb_candidates, byref(size_candidates),
                   array_object_model_positive, byref(size_positive), 
                   array_object_model_negative, byref(size_negative))

    candidates = []

    print('\n\nOs valores dos candidatos sao:')
    bb_list = []
    for i in range(size_positive.value):
        bb_pos = []
        bb_pos.append(array_bb_candidates[i])

        if(i%4==0 and i is not 0):
            bb_pos.append(frame)
            bb_list.append(bb_pos)
            print()
            
        print(str(array_bb_candidates[i])+' ',end='')

    candidates.append(bb_list)

    print('\n\nOs valores do object model ++ :')
    bb_list = []
    for i in range(size_positive.value):
        bb_pos = []
        bb_pos.append(array_object_model_positive[i])

        if(i%4==0 and i is not 0):
            bb_pos.append(frame)
            bb_list.append(bb_pos)
            print()
            
        print(str(array_object_model_positive[i])+' ',end='')

    positive_obj_model.append(bb_list)

    print('\n\nOs valores do object model -- :')
    bb_list = []
    for i in range(size_positive.value):
        bb_pos = []
        bb_pos.append(array_object_model_negative[i])

        if(i%4==0 and i is not 0):
            bb_pos.append(frame)
            bb_list.append(bb_pos)
            print()
            
        print(str(array_object_model_negative[i])+' ',end='')

    negative_obj_model.append(bb_list)

    print('\n\nOs valores do object model --:')
    for i in range(size_negative.value):
        if(i%4==0 and i is not 0):
            print()
        print(str(array_object_model_negative[i])+' ',end='')
    
    print()
    print('Frame de entrada: '+ str(frame)+ ' Frame de retorno: ' + str(retorno_frame.value))
    assert (frame == retorno_frame.value), "Conflito nos frames"

    # Calcula
    # candidates[ P ][ N ][ 5 ]
    #   - P: Numero de frames que retornaram bb ate o momento
    #   - N: Numero de bb do frame p-esimo frame
    #   - 5: (Centro_X, Centro_Y, Width, Height, Frame_Number)

    # positive_obj_model[ P ][ N ][ 5 ]
    #   - P: Numero de frames que retornaram bb ate o momento
    #   - N: Numero de bb do frame p-esimo frame
    #   - 5: (Centro_X, Centro_Y, Width, Height, Frame_Number)

    # negative_obj_model[ P ][ N ][ 5 ]
    #   - P: Numero de frames que retornaram bb ate o momento
    #   - N: Numero de bb do frame p-esimo frame
    #   - 5: (Centro_X, Centro_Y, Width, Height, Frame_Number)

    detSimilarity(candidates) # passa uma lista de bb dos candidatos retornado pelo TLD



    
    dll.TLD_function_2(byref(retorno_frame))

    assert (frame == retorno_frame.value), "Conflito nos frames"
    



    return lista1

interface1(2)
 
#'deepDescriptor' eh o descritor que sera passado para o codigo C. eh um descritor de 128/256 floats.
def interface2(deepDescriptor,frame):

    '''
    codigo de execucao do c/c++ aqui!
     
    Parametros( deepDescriptor e (frame ou void)
 
    1)retorna 'objectModel' que eh uma lista de posicoes do dos modelos de objetos detectados nesse, e somente nesse, frame,
    Onde a estrutura tem 5 elementos, 4 para posicoes e 1 para indicar se esse posicao eh positiva ou negativa. Retornne tambehm
    o numero do frame processado, para verificacao do assert.
    Caso precise retorna uma lista de tamanho fixo (um vetor), siga as recomendacoes do item 1) do comentario para interface1.
    2)Frame ao qual foi processada as informacoes, que alimentara a variavel: 'retornoFrame'.
    Vaviavel necessaria para garantir o processamento do mesmo frame.
    '''
    assert (frame==retornoFrame), "Conflito nos frames"
    return objectModel

